# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET and SonarCloud scan

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Planthor_PlanthorIdentityServer" /o:"planthor" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore
          dotnet build --no-restore
          dotnet test --no-build --verbosity normal
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  docker-build:
    runs-on: ubuntu-latest

    name: Docker build
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          # provided by @akakshuki
          # TODO: change to technical user account in the future
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
          add-hosts: # optional
          # List of extra privileged entitlement (e.g., network.host,security.insecure)
          allow: # optional
          # List of annotation to set to the image
          annotations: # optional
          # List of attestation parameters (e.g., type=sbom,generator=image)
          attests: # optional
          # List of build-time variables
          build-args: # optional
          # List of additional build contexts (e.g., name=path)
          build-contexts: # optional
          # Builder instance
          builder: # optional
          # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
          cache-from: # optional
          # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
          cache-to: # optional
          # Optional parent cgroup for the container used in the build
          cgroup-parent: # optional
          # Build's context is the set of files located in the specified PATH or URL
          context: # optional
          # Path to the Dockerfile
          file: # optional
          # List of metadata for an image
          labels: # optional
          # Load is a shorthand for --output=type=docker
          load: # optional, default is false
          # Set the networking mode for the RUN instructions during build
          network: # optional
          # Do not use cache when building the image
          no-cache: # optional, default is false
          # Do not cache specified stages
          no-cache-filters: # optional
          # List of output destinations (format: type=local,dest=path)
          outputs: # optional
          # List of target platforms for build
          platforms: # optional
          # Generate provenance attestation for the build (shorthand for --attest=type=provenance)
          provenance: # optional
          # Always attempt to pull all referenced images
          pull: # optional, default is false
          # Push is a shorthand for --output=type=registry
          push: # optional, default is false
          # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)
          sbom: # optional
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          secrets: # optional
          # List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
          secret-envs: # optional
          # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
          secret-files: # optional
          # Size of /dev/shm (e.g., 2g)
          shm-size: # optional
          # List of SSH agent socket or keys to expose to the build
          ssh: # optional
          # List of tags
          tags: # optional
          # Sets the target stage to build
          target: # optional
          # Ulimit options (e.g., nofile=1024:1024)
          ulimit: # optional
          # GitHub Token used to authenticate against a repository for Git context
          github-token: # optional, default is ${{ github.token }}
    
      - name: Check docker images 
        run: |
          docker images
              